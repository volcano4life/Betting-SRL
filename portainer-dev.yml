# Development-friendly Portainer Docker Compose for Betting SRL
# This version uses development mode to avoid build issues
version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: betting-srl-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: betting_srl
      POSTGRES_USER: betting_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - betting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U betting_user -d betting_srl"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: https://github.com/yourusername/betting-srl.git#main
      dockerfile: Dockerfile.dev
    image: betting-srl:dev
    container_name: betting-srl-app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://betting_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/betting_srl
      SESSION_SECRET: ${SESSION_SECRET:-change-this-super-secret-session-key-in-production}
      GNEWS_API_KEY: ${GNEWS_API_KEY:-}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - uploads:/app/uploads
      - assets:/app/attached_assets
    networks:
      - betting-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  uploads:
  assets:

networks:
  betting-network: